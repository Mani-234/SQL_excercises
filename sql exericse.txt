1. Write a query to select all columns from the 'employees' table.
CREATE TABLE employees (
    id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    position VARCHAR(100),
    department VARCHAR(100),
    salary DECIMAL(10, 2),
    hire_date DATE
);

INSERT INTO employees (id, first_name, last_name, position, department, salary, hire_date) VALUES
(1, 'Mani', 'Ganjala', 'Software Engineer', 'IT', 85000.00, '2020-03-15'),
(2, 'Keerthi', 'Ganjala', 'Project Manager', 'Operations', 95000.00, '2018-07-22'),
(3, 'Kushal', 'Ganjala', 'Data Analyst', 'Marketing', 72000.00, '2019-11-03'),
(4, 'Aji', 'Ganjala', 'HR Specialist', 'Human Resources', 60000.00, '2021-01-10'),
(5, 'Naga', 'Ganjala', 'Sales Executive', 'Sales', 67000.00, '2022-05-30');
Query:
    SELECT * FROM employees;
Explanation:
    We are selecting all the data from the employees

2nd Question
  Write a query to select 'first_name' and 'salary' from 'employees' where salary > 50000.
Query
    SELECT first_name, salary
    FROM employees
    WHERE salary > 50000;
Explanation
  Select is used to select the first name of the employee and from is used to select from the employees salary 50000

3rd Question
  Retrieve all records from the 'departments' table where department_name is 'Sales'.
Query
    SELECT * 
    FROM departments
    WHERE department_name = 'Sales';
Explanation
    Select is used to select from the particular department and where is used to filter the data on specific condition and ='' is used to select the data from the respective department

4th Question
  List all employees whose names start with 'A'.
Query
    SELECT *
    FROM employees
    WHERE first_name LIKE 'A%';
Explanation
    A% is used to match a string
    % is a wildcard for any number of characters

5th Question
  Display unique job titles from the 'jobs' table.
Query
    SELECT DISTINCT job_title
    FROM jobs;
Explanation
  This query will return a list of all different (unique) job titles from the jobs table

6th Question
  Count how many employees are in each department
Query
    SELECT department, COUNT(*) AS employee_count
    FROM employees
    GROUP BY department;
Explanation
  COUNT(*) is uesd to counts all employees in each department. GROUP BY department groups the results by the department name.
  employee_count is used for the count column

7th Question
  Find the average salary in each department
Query
    SELECT department, AVG(salary) AS average_salary
    FROM employees
    GROUP BY department;
Explanation
  AVG(salary) calculates the average salary from the table. Group By department is used to group the results department wise. average_salary is used to count the average salary column.

8th Question
 List employees ordered by hire_date descending
Query
    SELECT *
    FROM employees
    ORDER BY hire_date DESC;
Explanation
  hire_date DESC; is used to show all the employees with the most recently hired ones at the top

9th Question
  Write a query to find employees with NULL commission_pct
Query
    SELECT *
    FROM employees
    WHERE commission_pct IS NULL;
Explanation
  IS NULL is used to check for NULL values, not = NULL

10th Question
  Retrieve all departments that have more than 5 employees
Query
    SELECT department, COUNT(*) AS employee_count
    FROM employees
    GROUP BY department
    HAVING COUNT(*) > 5;
Explanation
  GROUP BY department groups employees by department. HAVING COUNT(*) > 5 filters groups with more than 5 employees.

11th Question
  Write an INNER JOIN between 'employees' and 'departments' on department_id
Query
    SELECT e.*, d.*
    FROM employees e
    INNER JOIN departments d ON e.department_id = d.department_id;
Explanation
  e and d are table aliases for easier reference. The join matches rows where employees.department_id equals       departments.department_id.The query selects all columns from both tables (e.*, d.*).

12th Question
  Use LEFT JOIN to find employees even if they are not assigned to any department
Query
    SELECT e.*, d.*
    FROM employees e
    LEFT JOIN departments d ON e.department_id = d.department_id;
Explanation
  Returns all employees (e).Joins matching departments (d) where department_id matches. For employees without a department, the department columns will be NULL.

13th Question 
  List employee names along with their manager names using a self join
Query
    SELECT 
    e.first_name AS employee_first_name,
    e.last_name AS employee_last_name,
    m.first_name AS manager_first_name,
    m.last_name AS manager_last_name
    FROM employees e
    LEFT JOIN employees m ON e.manager_id = m.id;
Explanation
  e is used for the employee. m is used for the manager (also from the same employees table).The LEFT JOIN ensures employees without a manager still appear (with NULL manager names).

14th Question
  Write a query using RIGHT JOIN between 'jobs' and 'employees'
Query
    SELECT j.*, e.*
    FROM jobs j
    RIGHT JOIN employees e ON j.job_id = e.job_id;
Explanation
  Returns all employees (right table). Includes matching jobs from the jobs table. If an employee’s job_id doesn’t match any in jobs, job columns will be NULL.

15th Question
  Perform a FULL OUTER JOIN between 'departments' and 'employees'. (simulate in MySQL)
Query
        SELECT *
        FROM departments LEFT JOIN employees
        ON departments.dept_id = employees.dept_id
        UNION
        SELECT *
        FROM departments RIGHT JOIN employees
        ON departments.dept_id = employees.dept_id;
Explanation
    Select is used to select all columns from both tables. FROM departments LEFT JOIN employees ON departments.dept_id =     employees.dept_id: This performs a LEFT JOIN, returning all rows from departments and matching rows from employees.
UNION: is used to combine the results of the LEFT JOIN and the RIGHT JOIN. FROM departments RIGHT JOIN employees ON departments.dept_id = employees.dept_id: This performs a RIGHT JOIN, returning all rows from employees and matching rows from departments.
ON departments.dept_id = employees.dept_id: This specifies the join condition based on the common column dept_id

16th Question
    Show total salary paid per job_id
Query
        SELECT job_id, SUM(salary) AS total_salary
        FROM employees
        GROUP BY job_id;
Explanation
    SUM(salary) calculates the total salary per job. GROUP BY job_id groups employees by their job.

17th Question
    Find the department with the maximum total salary
Query
        SELECT department, SUM(salary) AS total_salary
        FROM employees
        GROUP BY department
        ORDER BY total_salary DESC
        LIMIT 1;
Explanation
    SUM(salary) calculates total salary per department. GROUP BY department groups employees by department. ORDER BY total_salary DESC sorts departments by total salary in descending order. LIMIT 1 returns the top department only.

18th Question
    Display departments with average salary above 60000
Query
        SELECT department, AVG(salary) AS average_salary
        FROM employees
        GROUP BY department
        HAVING AVG(salary) > 60000;
Explanation
    AVG(salary) calculates the average salary per department. GROUP BY department groups results by department. HAVING filters those       groups where the average salary is greater than 60,000.

19th Question
    Count number of employees in each job group
Query
        SELECT job_id, COUNT(*) AS employee_count
        FROM employees
        GROUP BY job_id;
Explanation
    COUNT(*) is used to count the number of employees in each group. GROUP BY job_id or GROUP BY position groups employees by job. The  employee_count labels the result column.

20th Question
    List all job titles with their maximum and minimum salary
Query
        SELECT 
        position AS job_title,
        MAX(salary) AS max_salary,
        MIN(salary) AS min_salary
        FROM employees
        GROUP BY position;
Explanation
        MAX(salary) gets the highest salary for each job title. MIN(salary) gets the lowest salary for each job title. GROUP BY position groups the data by job title.

21st Question
    Find employees earning more than the average salary
Query
        SELECT *
        FROM employees
        WHERE salary > (
        SELECT AVG(salary)
        FROM employees
        );
Explanation
    (SELECT AVG(salary) FROM employees) calculates the average salary across all employees. ); is used to calculate the employees whose salary is greater than that value.

22nd Question
    List departments where the maximum salary is over 100000
Query
        SELECT department, MAX(salary) AS max_salary
        FROM employees
        GROUP BY department
        HAVING MAX(salary) > 100000;
Explanation
    MAX(salary) finds the highest salary in each department. GROUP BY department groups employees by department. HAVING MAX(salary) > 100000 is used to filter the salary only above 100000.

23rd Question
    Get names of employees who work in the same department as 'John'
Query
        SELECT first_name, last_name
        FROM employees
        WHERE department = (
            SELECT department
            FROM employees
            WHERE first_name = 'John'
        )
        AND first_name <> 'John';
Explanation
    The sub query ( finds the first_name = 'John'. The outer query ) selects other employees in that same department. AND first_name <> 'John' excludes John from the result.

24th Question
    List employees who are not managers (no one reports to them)
Query
        SELECT *
        FROM employees
        WHERE id NOT IN (
            SELECT DISTINCT manager_id
            FROM employees
            WHERE manager_id IS NOT NULL
        );
Explanation
    The subquery gets all manager_id values (people who are managers). The outer query selects employees whose id is not in that list — i.e., not managers.

25th Question
    Find employees hired before their managers
Query
        SELECT 
        e.first_name AS employee_first_name,
        e.last_name AS employee_last_name,
        e.hire_date AS employee_hire_date,
        m.first_name AS manager_first_name,
        m.last_name AS manager_last_name,
        m.hire_date AS manager_hire_date
    FROM employees e
    JOIN employees m ON e.manager_id = m.id
    WHERE e.hire_date < m.hire_date;
Explanation
    e = employee. m = manager. JOIN matches employees to their managers using manager_id. WHERE e.hire_date < m.hire_date filters for employees hired before their managers.

26th Question
    Display employee names in uppercase
Query
        SELECT 
            UPPER(first_name) AS first_name_upper,
            UPPER(last_name) AS last_name_upper
        FROM employees;
Explanation
    UPPER(column_name) converts text to uppercase. You can also concatenate full names if needed:

27th Question
    Concatenate first_name and last_name as 'Full Name'
Query
        SELECT 
            CONCAT(first_name, ' ', last_name) AS `Full Name`
        FROM employees;
Explanation
    CONCAT(first_name, ' ', last_name) is used to join the two names with a space and AS 'Full Name' gives the output column a readable label.

28th Question
    Show the length of each employee's first name
Query
        SELECT 
            first_name,
            LENGTH(first_name) AS name_length
        FROM employees;
Explanation
    LENGTH() returns the number of bytes, which is fine for ASCII characters. If the data contains multi-byte characters (e.g.,     accented letters or non-Latin characters), use CHAR_LENGTH() instead for character count:

29th Question
    Extract the month from hire_date
Query
        SELECT 
            first_name,
            last_name,
            hire_date,
            MONTH(hire_date) AS hire_month
        FROM employees;
Explanation
    MONTH(hire_date) is used to extract the numeric month (1–12) from the date.

30th Question
    Show current system date and time
Query
        SELECT NOW() AS current_datetime;
Explanation
    This function brings the datetime value that contains both the date and time of the computer where the SQL Server instance runs. The output format is yyyy-mm-dd hh:mm:ss.

31st Question
    Round all salaries to 2 decimal places
Query
        SELECT 
            first_name,
            last_name,
            ROUND(salary, 2) AS rounded_salary
        FROM employees;
Explanation
    ROUND(salary, 2) rounds the salary to 2 decimal places. It is useful for the salaries stored with more precision than needed for display.

32nd Question
    Show salary difference between highest and lowest paid employee
Query
        SELECT 
            MAX(salary) - MIN(salary) AS salary_difference
        FROM employees;
Explanation
    MAX(salary) shows the highest salary. MIN(salary) shows the lowest salary. The subtraction gives the difference between high and low.

33rd Question
    Display absolute difference in salaries between two employees
Query
        SELECT 
            ABS(e1.salary - e2.salary) AS salary_difference
        FROM employees e1
        JOIN employees e2
            ON e1.first_name = 'Naga' AND e2.first_name = 'Mani';
Explanation
    e1 and e2 are two instances of the employees table. ABS(e1.salary - e2.salary) gives the difference between their salaries.

34th Question
     Show all employees whose name contains the letter 'e'
Query
        SELECT *
        FROM employees
        WHERE first_name LIKE '%e%' OR last_name LIKE '%e%';
Explanation
    '%' is used to matche the number of characters. '%e%' means the letter 'e' can appear anywhere in the name. The OR condition checks both first_name and last_name.

35th Question
    List employees with salary between 50000 and 80000
Query
        SELECT *
        FROM employees
        WHERE salary BETWEEN 50000 AND 80000;
Explanation
    It includes the salaries greater than or equal to 50000 and less than or equal to 80000

36th Question
    Create a table named 'projects' with columns: id, name, start_date
Query
        CREATE TABLE projects (
            id INT PRIMARY KEY,
            name VARCHAR(100),
            start_date DATE
        );
Explanation
    id: a unique integer for each project (primary key). name: a string column up to 100 characters for the project name. start_date: is used to store the project's start date in YYYY-MM-DD format

37th Question
    Add a NOT NULL constraint to 'start_date' in 'projects'
Query:
        ALTER TABLE projects
        MODIFY start_date DATE NOT NULL;
Explanation:
    This query modifies the `start_date` column in the `projects` table to add a `NOT NULL` constraint, ensuring every project must have a start date.

38th Question
    Insert a record into 'projects' table.
Query:
        INSERT INTO projects (id, name, start_date)
        VALUES (1, 'Project Alpha', '2025-06-12');
Explanation:
     query inserts a new project record with id 1 name Project Alpha and start date June 12 2025 into the projects table.

39th Question
    Delete a project with id = 3 from 'projects'.
Query:
        DELETE FROM projects WHERE id = 3;
Explanation:
    query deletes the project record from the projects table where the id is 3.

40th Question
    Alter 'projects' to add column 'status' with default 'active'.
Query:
    ALTER TABLE projects
    ADD COLUMN status VARCHAR(20) DEFAULT 'active';
Explanation:
    query adds a new column status to the projects table with a default value of active for all existing and new records.

41st Question
    Start a transaction, update an employee's salary, then rollback
Query
    





    
    







      
    













